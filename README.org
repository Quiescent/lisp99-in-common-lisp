* Introduction

I'm learning Common Lisp and the Lisp-99 problems seem like a good way
to practice some of the basics.

* Problems

** [[./lisp/problem1.lisp][Problem 1]]: Find the last box of a list
Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem1.lisp")
  (my-last '(a b c d)); => (D)
#+END_SRC

#+RESULTS:
(D)

** [[./lisp/problem2.lisp][Problem 2]]: Find the last but one box of a list
Example

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem2.lisp")
  (my-but-last '(a b c d)); => (C D)
#+END_SRC

#+RESULTS:
(C D)

** [[./lisp/problem3.lisp][Problem 3]]: Find the K'th element of a list
The first element in the list is number 1.

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem3.lisp")
  (element-at '(a b c d e) 3); => C
#+END_SRC

#+RESULTS:
C

** [[./lisp/problem4.lisp][Problem 4]]: Find the number of elements of a list

Example:
#+BEGIN_SRC lisp :results raw
  (load "lisp/problem4.lisp")
  (my-length '(1 2 3 4 5 6 7)); => 7
#+END_SRC

#+RESULTS:
7

** [[./lisp/problem5.lisp][Problem 5]]: Reverse a list

Example:
#+BEGIN_SRC lisp :results raw
  (load "lisp/problem5.lisp")
  (my-reverse '(a b c d e)); => (E D C B A)
  (my-reverse-2 '(a b c d e)); => (E D C B A)
#+END_SRC

#+RESULTS:
(E D C B A)

** [[./lisp/problem6.lisp][Problem 6]]: Find out whether a list is a palindrome

Example:
#+BEGIN_SRC lisp :results raw
  (load "lisp/problem6.lisp")
  (cons (is-palindrome '(1 2 3 4 5 6 7 8 9 10))
        (is-palindrome '(1 2 3 4 5 6 5 4 3 2 1))); => (NIL . T)
#+END_SRC

#+RESULTS:
(NIL . T)

** [[./lisp/problem7.lisp][Problem 7]]: Flatten a nested list structure
Transform a list, possibly holding lists as elements into a `flat'
list by replacing each list with its elements (recursively).

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem7.lisp")
  (my-flatten '(a (b (c d) e))); => (A B C D E)
#+END_SRC

#+RESULTS:
(A B C D E)

Hint: Use the predefined functions list and append.

** [[./lisp/problem8.lisp][Problem 8]]: Eliminate consecutive duplicates of list elements
If a list contains repeated elements they should be replaced with a
single copy of the element.  The order of the elements should not be
changed.

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem8.lisp")
  (compress '(a a a a b c c a a d e e e e)); => (A B C A D E)
#+END_SRC

#+RESULTS:
(A B C A D E)

** [[./lisp/problem9.lisp][Problem 9]]: Pack consecutive duplicates of list elements into sublists
If a list contains repeated elements they should be placed in separate
sublists.

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem9.lisp")
  (pack '(a a a a b c c a a d e e e e)); => ((A A A A) (B) (C C) (A A) (D) (E E E E))
#+END_SRC

#+RESULTS:
((A A A A) (B) (C C) (A A) (D) (E E E E))


** [[./lisp/problem10.lisp][Problem 10]]: Run-length encoding of a list
Use the result of problem P09 to implement the so-called run-length
encoding data compression method. Consecutive duplicates of elements
are encoded as lists (N E) where N is the number of duplicates of the
element E.

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem9.lisp")
  (load "lisp/problem10.lisp")
  (encode '(a a a a b c c a a d e e e e)); => ((4 A) (1 B) (2 C) (2 A) (1 D) (4 E))
#+END_SRC

#+RESULTS:
((4 . A) (1 . B) (2 . C) (2 . A) (1 . D) (4 . E))

** [[./lisp/problem11.lisp][Problem 11]]: Modified run-length encoding
Modify the result of problem P10 in such a way that if an element has
no duplicates it is simply copied into the result list.  Only elements
with duplicates are transferred as (N E) lists.

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem9.lisp")
  (load "lisp/problem10.lisp")
  (load "lisp/problem11.lisp").
  (encode-modified '(a a a a b c c a a d e e e e)); => ((4 A) B (2 C) (2 A) D (4 E))
#+END_SRC

#+RESULTS:
((4 . A) B (2 . C) (2 . A) D (4 . E))

** [[./lisp/problem12.lisp][Problem 12]]: Decode a run-length encoded list
Given a run-length code list generated as specified in problem
P11.  Construct its uncompressed version.

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem12.lisp")
  (decode '((4 A) B (2 C) (2 A) D (4 E))); => (A A A A B C C A A D E E E E)
#+END_SRC

#+RESULTS:
(A A A A B C C A A D E E E E)

** [[./lisp/problem13.lisp][Problem 13]]: Run-length encoding of a list (direct solution)
Implement the so-called run-length encoding data compression method
directly.  I.e. don't explicitly create the sublists containing the
duplicates, as in problem P09, but only count them.  As in problem
P11, simplify the result list by replacing the singleton lists (1 X)
by X.

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem13.lisp")
  (encode-direct '(a a a a b c c a a d e e e e)); => ((4 A) B (2 C) (2 A) D (4 E))
#+END_SRC

#+RESULTS:
((4 . A) B (2 . C) (2 . A) D (4 . E))

** [[./lisp/problem14.lisp][Problem 14]]: Duplicate the elements of a list

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem14.lisp")
  (dupli '(a b c c d)); => (A A B B C C C C D D)
#+END_SRC

#+RESULTS:
(A A B B C C C C D D)

** [[./lisp/problem15.lisp][Problem 15]]: Replicate the elements of a list a given number of times

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem15.lisp")
  (repli '(a b c) 3); => (A A A B B B C C C)
#+END_SRC

#+RESULTS:
(A A A B B B C C C)

** [[./lisp/problem16.lisp][Problem 16]]: Drop every N'th element from a list

Example:

#+BEGIN_SRC lisp :results raw
  (load "lisp/problem16.lisp")
  (drop '(a b c d e f g h i k) 3); => (A B D E G H K)
#+END_SRC

#+RESULTS:
(A B D E G H K)

** [[./lisp/problem17.lisp][Problem 17]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem18.lisp][Problem 18]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem19.lisp][Problem 19]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem20.lisp][Problem 20]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem21.lisp][Problem 21]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem22.lisp][Problem 22]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem23.lisp][Problem 23]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem24.lisp][Problem 24]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem25.lisp][Problem 25]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem26.lisp][Problem 26]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem27.lisp][Problem 27]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem28.lisp][Problem 28]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem29.lisp][Problem 29]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem30.lisp][Problem 30]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem31.lisp][Problem 31]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem32.lisp][Problem 32]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem33.lisp][Problem 33]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem34.lisp][Problem 34]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem35.lisp][Problem 35]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem36.lisp][Problem 36]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem37.lisp][Problem 37]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem38.lisp][Problem 38]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem39.lisp][Problem 39]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem40.lisp][Problem 40]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem41.lisp][Problem 41]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem42.lisp][Problem 42]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem43.lisp][Problem 43]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem44.lisp][Problem 44]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem45.lisp][Problem 45]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem46.lisp][Problem 46]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem47.lisp][Problem 47]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem48.lisp][Problem 48]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem49.lisp][Problem 49]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem50.lisp][Problem 50]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem51.lisp][Problem 51]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem52.lisp][Problem 52]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem53.lisp][Problem 53]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem54.lisp][Problem 54]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem55.lisp][Problem 55]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem56.lisp][Problem 56]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem57.lisp][Problem 57]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem58.lisp][Problem 58]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem59.lisp][Problem 59]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem60.lisp][Problem 60]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem61.lisp][Problem 61]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem62.lisp][Problem 62]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem63.lisp][Problem 63]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem64.lisp][Problem 64]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem65.lisp][Problem 65]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem66.lisp][Problem 66]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem67.lisp][Problem 67]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem68.lisp][Problem 68]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem69.lisp][Problem 69]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem70.lisp][Problem 70]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem71.lisp][Problem 71]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem72.lisp][Problem 72]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem73.lisp][Problem 73]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem74.lisp][Problem 74]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem75.lisp][Problem 75]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem76.lisp][Problem 76]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem77.lisp][Problem 77]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem78.lisp][Problem 78]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem79.lisp][Problem 79]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem80.lisp][Problem 80]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem81.lisp][Problem 81]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem82.lisp][Problem 82]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem83.lisp][Problem 83]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem84.lisp][Problem 84]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem85.lisp][Problem 85]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem86.lisp][Problem 86]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem87.lisp][Problem 87]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem88.lisp][Problem 88]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem89.lisp][Problem 89]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem90.lisp][Problem 90]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem91.lisp][Problem 91]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem92.lisp][Problem 92]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem93.lisp][Problem 93]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem94.lisp][Problem 94]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem95.lisp][Problem 95]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem96.lisp][Problem 96]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem97.lisp][Problem 97]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem98.lisp][Problem 98]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

** [[./lisp/problem99.lisp][Problem 99]]: {}
Example

#+BEGIN_SRC lisp :results raw

#+END_SRC

