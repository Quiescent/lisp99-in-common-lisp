(defun group3 (xs)
  (labels
      ((choose-base (ys n i)
         (if (or (null ys)
                 (eq 0 i))
             (list nil)
             (append (mapcar (lambda (other)
                               (cons (car ys)
                                     other))
                             (choose-base (cdr ys) n (1- i)))
                     (choose-base (cdr ys)
                                  n
                                  i))))
       (choose (ys n i)
         (remove-if (lambda (zs)
                      (< (length zs) n))
                    (choose-base ys n i))))
    (let ((twos   (choose xs 2 2))
          (threes (choose xs 3 3))
          (fours  (choose xs 4 4)))
      ;; (print twos)
      ;; (print threes)
      ;; (print fours)
      (apply #'append
             (mapcar (lambda (two)
                       (apply #'append
                              (mapcar (lambda (three)
                                        (mapcar (lambda (four)
                                                  (list two three four))
                                                (remove-if (lambda (four)
                                                             (or (intersection two four)
                                                                 (intersection three four)))
                                                           fours)))
                                      (remove-if (lambda (three)
                                                   (intersection two three))
                                                 threes))))
                     twos)))))
